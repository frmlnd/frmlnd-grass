/**
  * A silly angular app that makes grass grow at the bottom of a container, most likely a webpage.
  * @version 0.1.0
  * @link https://github.com/frmlnd/frmlnd-grass
  * @license MIT License, http://www.opensource.org/licenses/MIT
  */

var app = angular.module('frmlnd-grass', []);

var frmlndGrass = function($window, $interval) {
	return {
		restrict: 'E',
		scope: {},
		link: function(scope, element, attrs) {

			// Get window dimensions
			var dimensions = {
				w: $window.innerWidth,
				h: $window.innerHeight
			};

			// Create grass blades and add them to the DOM
			var blades = [];
			for (var i=1; i<dimensions.w; i++) {
				blades[i] = angular.element('<div class="blade" style="left: ' + i + 'px"></div>');
				element.append(blades[i]);
			}

			// Make the grass grow
			var count = 0;
			var intervalLength = 17;
			scope.growGrass = $interval(function() {
				if (count * intervalLength > attrs.duration) {
					$interval.cancel(scope.growGrass);
				}

				var repeat = attrs.duration / intervalLength;
				for (var i=0; i<repeat; i++) {
					var blade_index = Math.floor(Math.random() * (dimensions.w - 1) + 1);
					if (blade_index) {
						var grow_distance = Math.floor(Math.random() * (10 - 1) + 1);
						var rotate = (Math.floor(Math.random() * 20) + 1) * (Math.floor(Math.random() * 2) == 1 ? 1 : -1);
						var current_height = blades[blade_index][0].offsetHeight;
						blades[blade_index].css('height', current_height + grow_distance + 'px');
						blades[blade_index].css('transform', 'rotate(' + rotate + 'deg)');
					}
				}
				count += intervalLength;

			}, intervalLength);

			scope.$on('$destroy', function() {
				$interval.cancel(scope.growGrass);
			});			

		}
	}
};

frmlndGrass.$inject = ['$window','$interval'];
angular.module('frmlnd-grass').directive('frmlndGrass', frmlndGrass);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImZybWxuZEdyYXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJmcm1sbmQtZ3Jhc3MubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdmcm1sbmQtZ3Jhc3MnLCBbXSk7XG4iLCJ2YXIgZnJtbG5kR3Jhc3MgPSBmdW5jdGlvbigkd2luZG93LCAkaW50ZXJ2YWwpIHtcblx0cmV0dXJuIHtcblx0XHRyZXN0cmljdDogJ0UnLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcblxuXHRcdFx0Ly8gR2V0IHdpbmRvdyBkaW1lbnNpb25zXG5cdFx0XHR2YXIgZGltZW5zaW9ucyA9IHtcblx0XHRcdFx0dzogJHdpbmRvdy5pbm5lcldpZHRoLFxuXHRcdFx0XHRoOiAkd2luZG93LmlubmVySGVpZ2h0XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBDcmVhdGUgZ3Jhc3MgYmxhZGVzIGFuZCBhZGQgdGhlbSB0byB0aGUgRE9NXG5cdFx0XHR2YXIgYmxhZGVzID0gW107XG5cdFx0XHRmb3IgKHZhciBpPTE7IGk8ZGltZW5zaW9ucy53OyBpKyspIHtcblx0XHRcdFx0YmxhZGVzW2ldID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwiYmxhZGVcIiBzdHlsZT1cImxlZnQ6ICcgKyBpICsgJ3B4XCI+PC9kaXY+Jyk7XG5cdFx0XHRcdGVsZW1lbnQuYXBwZW5kKGJsYWRlc1tpXSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2UgdGhlIGdyYXNzIGdyb3dcblx0XHRcdHZhciBjb3VudCA9IDA7XG5cdFx0XHR2YXIgaW50ZXJ2YWxMZW5ndGggPSAxNztcblx0XHRcdHNjb3BlLmdyb3dHcmFzcyA9ICRpbnRlcnZhbChmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKGNvdW50ICogaW50ZXJ2YWxMZW5ndGggPiBhdHRycy5kdXJhdGlvbikge1xuXHRcdFx0XHRcdCRpbnRlcnZhbC5jYW5jZWwoc2NvcGUuZ3Jvd0dyYXNzKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciByZXBlYXQgPSBhdHRycy5kdXJhdGlvbiAvIGludGVydmFsTGVuZ3RoO1xuXHRcdFx0XHRmb3IgKHZhciBpPTA7IGk8cmVwZWF0OyBpKyspIHtcblx0XHRcdFx0XHR2YXIgYmxhZGVfaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZGltZW5zaW9ucy53IC0gMSkgKyAxKTtcblx0XHRcdFx0XHRpZiAoYmxhZGVfaW5kZXgpIHtcblx0XHRcdFx0XHRcdHZhciBncm93X2Rpc3RhbmNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEwIC0gMSkgKyAxKTtcblx0XHRcdFx0XHRcdHZhciByb3RhdGUgPSAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApICsgMSkgKiAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMikgPT0gMSA/IDEgOiAtMSk7XG5cdFx0XHRcdFx0XHR2YXIgY3VycmVudF9oZWlnaHQgPSBibGFkZXNbYmxhZGVfaW5kZXhdWzBdLm9mZnNldEhlaWdodDtcblx0XHRcdFx0XHRcdGJsYWRlc1tibGFkZV9pbmRleF0uY3NzKCdoZWlnaHQnLCBjdXJyZW50X2hlaWdodCArIGdyb3dfZGlzdGFuY2UgKyAncHgnKTtcblx0XHRcdFx0XHRcdGJsYWRlc1tibGFkZV9pbmRleF0uY3NzKCd0cmFuc2Zvcm0nLCAncm90YXRlKCcgKyByb3RhdGUgKyAnZGVnKScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRjb3VudCArPSBpbnRlcnZhbExlbmd0aDtcblxuXHRcdFx0fSwgaW50ZXJ2YWxMZW5ndGgpO1xuXG5cdFx0XHRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCRpbnRlcnZhbC5jYW5jZWwoc2NvcGUuZ3Jvd0dyYXNzKTtcblx0XHRcdH0pO1x0XHRcdFxuXG5cdFx0fVxuXHR9XG59O1xuXG5mcm1sbmRHcmFzcy4kaW5qZWN0ID0gWyckd2luZG93JywnJGludGVydmFsJ107XG5hbmd1bGFyLm1vZHVsZSgnZnJtbG5kLWdyYXNzJykuZGlyZWN0aXZlKCdmcm1sbmRHcmFzcycsIGZybWxuZEdyYXNzKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=