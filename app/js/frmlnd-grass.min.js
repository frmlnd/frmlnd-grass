/**
  * A silly angular app that makes grass grow at the bottom of a container, most likely a webpage.
  * @version 0.1.0
  * @link https://github.com/frmlnd/frmlnd-grass
  * @license MIT License, http://www.opensource.org/licenses/MIT
  */

var app = angular.module('frmlnd-grass', []);

var frmlndGrass = function($window, $interval) {
	return {
		restrict: 'E',
		scope: {},
		link: function(scope, element, attrs) {

			// Observe the element's dimensions.
			var dimensions = {
				w: element[0].offsetParent.clientWidth,
				h: element[0].offsetParent.clientHeight
			};

			// Create grass blades and add them to the DOM
			var blades = [];
			for (var i=1; i<dimensions.w; i++) {
				blades[i] = angular.element('<div class="blade" style="left: ' + i + 'px"></div>');
				element.append(blades[i]);
			}

			// Make the grass grow
			var count = 0;
			var intervalLength = 17;
			scope.growGrass = $interval(function() {
				if (count * intervalLength > attrs.duration) {
					$interval.cancel(scope.growGrass);
				}

				var repeat = attrs.duration / intervalLength;
				for (var i=0; i<repeat; i++) {
					var blade_index = Math.floor(Math.random() * (dimensions.w - 1) + 1);
					if (blade_index) {
						var grow_distance = Math.floor(Math.random() * (10 - 1) + 1);
						var rotate = (Math.floor(Math.random() * 20) + 1) * (Math.floor(Math.random() * 2) == 1 ? 1 : -1);
						var current_height = blades[blade_index][0].offsetHeight;
						blades[blade_index].css('height', current_height + grow_distance + 'px');
						blades[blade_index].css('transform', 'rotate(' + rotate + 'deg)');
					}
				}
				count += intervalLength;

			}, intervalLength);

			scope.$on('$destroy', function() {
				$interval.cancel(scope.growGrass);
			});			

		}
	}
};

frmlndGrass.$inject = ['$window','$interval'];
angular.module('frmlnd-grass').directive('frmlndGrass', frmlndGrass);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImZybWxuZEdyYXNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJmcm1sbmQtZ3Jhc3MubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdmcm1sbmQtZ3Jhc3MnLCBbXSk7XG4iLCJ2YXIgZnJtbG5kR3Jhc3MgPSBmdW5jdGlvbigkd2luZG93LCAkaW50ZXJ2YWwpIHtcblx0cmV0dXJuIHtcblx0XHRyZXN0cmljdDogJ0UnLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcblxuXHRcdFx0Ly8gT2JzZXJ2ZSB0aGUgZWxlbWVudCdzIGRpbWVuc2lvbnMuXG5cdFx0XHR2YXIgZGltZW5zaW9ucyA9IHtcblx0XHRcdFx0dzogZWxlbWVudFswXS5vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGgsXG5cdFx0XHRcdGg6IGVsZW1lbnRbMF0ub2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ3JlYXRlIGdyYXNzIGJsYWRlcyBhbmQgYWRkIHRoZW0gdG8gdGhlIERPTVxuXHRcdFx0dmFyIGJsYWRlcyA9IFtdO1xuXHRcdFx0Zm9yICh2YXIgaT0xOyBpPGRpbWVuc2lvbnMudzsgaSsrKSB7XG5cdFx0XHRcdGJsYWRlc1tpXSA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cImJsYWRlXCIgc3R5bGU9XCJsZWZ0OiAnICsgaSArICdweFwiPjwvZGl2PicpO1xuXHRcdFx0XHRlbGVtZW50LmFwcGVuZChibGFkZXNbaV0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHRoZSBncmFzcyBncm93XG5cdFx0XHR2YXIgY291bnQgPSAwO1xuXHRcdFx0dmFyIGludGVydmFsTGVuZ3RoID0gMTc7XG5cdFx0XHRzY29wZS5ncm93R3Jhc3MgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmIChjb3VudCAqIGludGVydmFsTGVuZ3RoID4gYXR0cnMuZHVyYXRpb24pIHtcblx0XHRcdFx0XHQkaW50ZXJ2YWwuY2FuY2VsKHNjb3BlLmdyb3dHcmFzcyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgcmVwZWF0ID0gYXR0cnMuZHVyYXRpb24gLyBpbnRlcnZhbExlbmd0aDtcblx0XHRcdFx0Zm9yICh2YXIgaT0wOyBpPHJlcGVhdDsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIGJsYWRlX2luZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGRpbWVuc2lvbnMudyAtIDEpICsgMSk7XG5cdFx0XHRcdFx0aWYgKGJsYWRlX2luZGV4KSB7XG5cdFx0XHRcdFx0XHR2YXIgZ3Jvd19kaXN0YW5jZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMCAtIDEpICsgMSk7XG5cdFx0XHRcdFx0XHR2YXIgcm90YXRlID0gKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIwKSArIDEpICogKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpID09IDEgPyAxIDogLTEpO1xuXHRcdFx0XHRcdFx0dmFyIGN1cnJlbnRfaGVpZ2h0ID0gYmxhZGVzW2JsYWRlX2luZGV4XVswXS5vZmZzZXRIZWlnaHQ7XG5cdFx0XHRcdFx0XHRibGFkZXNbYmxhZGVfaW5kZXhdLmNzcygnaGVpZ2h0JywgY3VycmVudF9oZWlnaHQgKyBncm93X2Rpc3RhbmNlICsgJ3B4Jyk7XG5cdFx0XHRcdFx0XHRibGFkZXNbYmxhZGVfaW5kZXhdLmNzcygndHJhbnNmb3JtJywgJ3JvdGF0ZSgnICsgcm90YXRlICsgJ2RlZyknKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Y291bnQgKz0gaW50ZXJ2YWxMZW5ndGg7XG5cblx0XHRcdH0sIGludGVydmFsTGVuZ3RoKTtcblxuXHRcdFx0c2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkaW50ZXJ2YWwuY2FuY2VsKHNjb3BlLmdyb3dHcmFzcyk7XG5cdFx0XHR9KTtcdFx0XHRcblxuXHRcdH1cblx0fVxufTtcblxuZnJtbG5kR3Jhc3MuJGluamVjdCA9IFsnJHdpbmRvdycsJyRpbnRlcnZhbCddO1xuYW5ndWxhci5tb2R1bGUoJ2ZybWxuZC1ncmFzcycpLmRpcmVjdGl2ZSgnZnJtbG5kR3Jhc3MnLCBmcm1sbmRHcmFzcyk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9